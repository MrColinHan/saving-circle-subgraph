// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CircleCreated extends ethereum.Event {
  get params(): CircleCreated__Params {
    return new CircleCreated__Params(this);
  }
}

export class CircleCreated__Params {
  _event: CircleCreated;

  constructor(event: CircleCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class CircleMemberUpdate extends ethereum.Event {
  get params(): CircleMemberUpdate__Params {
    return new CircleMemberUpdate__Params(this);
  }
}

export class CircleMemberUpdate__Params {
  _event: CircleMemberUpdate;

  constructor(event: CircleMemberUpdate) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get status(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ContributionMade extends ethereum.Event {
  get params(): ContributionMade__Params {
    return new ContributionMade__Params(this);
  }
}

export class ContributionMade__Params {
  _event: ContributionMade;

  constructor(event: ContributionMade) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DepositMade extends ethereum.Event {
  get params(): DepositMade__Params {
    return new DepositMade__Params(this);
  }
}

export class DepositMade__Params {
  _event: DepositMade;

  constructor(event: DepositMade) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoanRequestMade extends ethereum.Event {
  get params(): LoanRequestMade__Params {
    return new LoanRequestMade__Params(this);
  }
}

export class LoanRequestMade__Params {
  _event: LoanRequestMade;

  constructor(event: LoanRequestMade) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get granted(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class RepaymentStatus extends ethereum.Event {
  get params(): RepaymentStatus__Params {
    return new RepaymentStatus__Params(this);
  }
}

export class RepaymentStatus__Params {
  _event: RepaymentStatus;

  constructor(event: RepaymentStatus) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get fullamount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get repayment(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fullyrepaid(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class RequestGranted extends ethereum.Event {
  get params(): RequestGranted__Params {
    return new RequestGranted__Params(this);
  }
}

export class RequestGranted__Params {
  _event: RequestGranted;

  constructor(event: RequestGranted) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RequestMade extends ethereum.Event {
  get params(): RequestMade__Params {
    return new RequestMade__Params(this);
  }
}

export class RequestMade__Params {
  _event: RequestMade;

  constructor(event: RequestMade) {
    this._event = event;
  }

  get requester(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__getBalancesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Contract__getCircleInfoResult {
  value0: Array<Address>;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: i32;

  constructor(
    value0: Array<Address>,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    return map;
  }
}

export class Contract__getRequestResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: Address, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class Contract__getRequestsResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;
  value2: Array<Address>;
  value3: Array<BigInt>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<BigInt>,
    value2: Array<Address>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromAddressArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class Contract__getTotalBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__queryMissedPaymentsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getBalances(circleID: Bytes): Contract__getBalancesResult {
    let result = super.call(
      "getBalances",
      "getBalances(bytes32):(address[],uint256[])",
      [ethereum.Value.fromFixedBytes(circleID)]
    );

    return new Contract__getBalancesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getBalances(
    circleID: Bytes
  ): ethereum.CallResult<Contract__getBalancesResult> {
    let result = super.tryCall(
      "getBalances",
      "getBalances(bytes32):(address[],uint256[])",
      [ethereum.Value.fromFixedBytes(circleID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getBalancesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getCircleInfo(circle: Bytes): Contract__getCircleInfoResult {
    let result = super.call(
      "getCircleInfo",
      "getCircleInfo(bytes32):(address[],address,uint256,uint256,uint8)",
      [ethereum.Value.fromFixedBytes(circle)]
    );

    return new Contract__getCircleInfoResult(
      result[0].toAddressArray(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32()
    );
  }

  try_getCircleInfo(
    circle: Bytes
  ): ethereum.CallResult<Contract__getCircleInfoResult> {
    let result = super.tryCall(
      "getCircleInfo",
      "getCircleInfo(bytes32):(address[],address,uint256,uint256,uint8)",
      [ethereum.Value.fromFixedBytes(circle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getCircleInfoResult(
        value[0].toAddressArray(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32()
      )
    );
  }

  getCircles(user: Address): Array<Bytes> {
    let result = super.call("getCircles", "getCircles(address):(bytes32[])", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBytesArray();
  }

  try_getCircles(user: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getCircles",
      "getCircles(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getMembers(circle: Bytes): Array<Address> {
    let result = super.call("getMembers", "getMembers(bytes32):(address[])", [
      ethereum.Value.fromFixedBytes(circle)
    ]);

    return result[0].toAddressArray();
  }

  try_getMembers(circle: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getMembers",
      "getMembers(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(circle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getRequest(
    circleID: Bytes,
    requestIndex: BigInt
  ): Contract__getRequestResult {
    let result = super.call(
      "getRequest",
      "getRequest(bytes32,uint256):(uint256,uint256,address,uint256)",
      [
        ethereum.Value.fromFixedBytes(circleID),
        ethereum.Value.fromUnsignedBigInt(requestIndex)
      ]
    );

    return new Contract__getRequestResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_getRequest(
    circleID: Bytes,
    requestIndex: BigInt
  ): ethereum.CallResult<Contract__getRequestResult> {
    let result = super.tryCall(
      "getRequest",
      "getRequest(bytes32,uint256):(uint256,uint256,address,uint256)",
      [
        ethereum.Value.fromFixedBytes(circleID),
        ethereum.Value.fromUnsignedBigInt(requestIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getRequestResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  getRequests(circleID: Bytes): Contract__getRequestsResult {
    let result = super.call(
      "getRequests",
      "getRequests(bytes32):(uint256[],uint256[],address[],uint256[])",
      [ethereum.Value.fromFixedBytes(circleID)]
    );

    return new Contract__getRequestsResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray(),
      result[2].toAddressArray(),
      result[3].toBigIntArray()
    );
  }

  try_getRequests(
    circleID: Bytes
  ): ethereum.CallResult<Contract__getRequestsResult> {
    let result = super.tryCall(
      "getRequests",
      "getRequests(bytes32):(uint256[],uint256[],address[],uint256[])",
      [ethereum.Value.fromFixedBytes(circleID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getRequestsResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray(),
        value[2].toAddressArray(),
        value[3].toBigIntArray()
      )
    );
  }

  getTotalBalance(circleID: Bytes): Contract__getTotalBalanceResult {
    let result = super.call(
      "getTotalBalance",
      "getTotalBalance(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(circleID)]
    );

    return new Contract__getTotalBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getTotalBalance(
    circleID: Bytes
  ): ethereum.CallResult<Contract__getTotalBalanceResult> {
    let result = super.tryCall(
      "getTotalBalance",
      "getTotalBalance(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(circleID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTotalBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  queryMissedPayments(circleID: Bytes): Contract__queryMissedPaymentsResult {
    let result = super.call(
      "queryMissedPayments",
      "queryMissedPayments(bytes32):(address[],uint256[])",
      [ethereum.Value.fromFixedBytes(circleID)]
    );

    return new Contract__queryMissedPaymentsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_queryMissedPayments(
    circleID: Bytes
  ): ethereum.CallResult<Contract__queryMissedPaymentsResult> {
    let result = super.tryCall(
      "queryMissedPayments",
      "queryMissedPayments(bytes32):(address[],uint256[])",
      [ethereum.Value.fromFixedBytes(circleID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__queryMissedPaymentsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }
}

export class CreateCircleCall extends ethereum.Call {
  get inputs(): CreateCircleCall__Inputs {
    return new CreateCircleCall__Inputs(this);
  }

  get outputs(): CreateCircleCall__Outputs {
    return new CreateCircleCall__Outputs(this);
  }
}

export class CreateCircleCall__Inputs {
  _call: CreateCircleCall;

  constructor(call: CreateCircleCall) {
    this._call = call;
  }

  get uuid(): string {
    return this._call.inputValues[0].value.toString();
  }

  get members(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokenAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get depositAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get govType(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get cycleTime(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get autoStart(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class CreateCircleCall__Outputs {
  _call: CreateCircleCall;

  constructor(call: CreateCircleCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get circleID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class EmitCircleCreateEventCall extends ethereum.Call {
  get inputs(): EmitCircleCreateEventCall__Inputs {
    return new EmitCircleCreateEventCall__Inputs(this);
  }

  get outputs(): EmitCircleCreateEventCall__Outputs {
    return new EmitCircleCreateEventCall__Outputs(this);
  }
}

export class EmitCircleCreateEventCall__Inputs {
  _call: EmitCircleCreateEventCall;

  constructor(call: EmitCircleCreateEventCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class EmitCircleCreateEventCall__Outputs {
  _call: EmitCircleCreateEventCall;

  constructor(call: EmitCircleCreateEventCall) {
    this._call = call;
  }
}

export class EmitCircleUpdateEventCall extends ethereum.Call {
  get inputs(): EmitCircleUpdateEventCall__Inputs {
    return new EmitCircleUpdateEventCall__Inputs(this);
  }

  get outputs(): EmitCircleUpdateEventCall__Outputs {
    return new EmitCircleUpdateEventCall__Outputs(this);
  }
}

export class EmitCircleUpdateEventCall__Inputs {
  _call: EmitCircleUpdateEventCall;

  constructor(call: EmitCircleUpdateEventCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get status(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class EmitCircleUpdateEventCall__Outputs {
  _call: EmitCircleUpdateEventCall;

  constructor(call: EmitCircleUpdateEventCall) {
    this._call = call;
  }
}

export class EmitDepositEventCall extends ethereum.Call {
  get inputs(): EmitDepositEventCall__Inputs {
    return new EmitDepositEventCall__Inputs(this);
  }

  get outputs(): EmitDepositEventCall__Outputs {
    return new EmitDepositEventCall__Outputs(this);
  }
}

export class EmitDepositEventCall__Inputs {
  _call: EmitDepositEventCall;

  constructor(call: EmitDepositEventCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmitDepositEventCall__Outputs {
  _call: EmitDepositEventCall;

  constructor(call: EmitDepositEventCall) {
    this._call = call;
  }
}

export class EmitLoanRequestEventCall extends ethereum.Call {
  get inputs(): EmitLoanRequestEventCall__Inputs {
    return new EmitLoanRequestEventCall__Inputs(this);
  }

  get outputs(): EmitLoanRequestEventCall__Outputs {
    return new EmitLoanRequestEventCall__Outputs(this);
  }
}

export class EmitLoanRequestEventCall__Inputs {
  _call: EmitLoanRequestEventCall;

  constructor(call: EmitLoanRequestEventCall) {
    this._call = call;
  }

  get requester(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get granted(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class EmitLoanRequestEventCall__Outputs {
  _call: EmitLoanRequestEventCall;

  constructor(call: EmitLoanRequestEventCall) {
    this._call = call;
  }
}

export class EmitRepaymentEventCall extends ethereum.Call {
  get inputs(): EmitRepaymentEventCall__Inputs {
    return new EmitRepaymentEventCall__Inputs(this);
  }

  get outputs(): EmitRepaymentEventCall__Outputs {
    return new EmitRepaymentEventCall__Outputs(this);
  }
}

export class EmitRepaymentEventCall__Inputs {
  _call: EmitRepaymentEventCall;

  constructor(call: EmitRepaymentEventCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get circle(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get fullamount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get repayment(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fullyrepaid(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class EmitRepaymentEventCall__Outputs {
  _call: EmitRepaymentEventCall;

  constructor(call: EmitRepaymentEventCall) {
    this._call = call;
  }
}

export class RequestCall extends ethereum.Call {
  get inputs(): RequestCall__Inputs {
    return new RequestCall__Inputs(this);
  }

  get outputs(): RequestCall__Outputs {
    return new RequestCall__Outputs(this);
  }
}

export class RequestCall__Inputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }

  get circleID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RequestCall__Outputs {
  _call: RequestCall;

  constructor(call: RequestCall) {
    this._call = call;
  }
}

export class StartNewCycleCall extends ethereum.Call {
  get inputs(): StartNewCycleCall__Inputs {
    return new StartNewCycleCall__Inputs(this);
  }

  get outputs(): StartNewCycleCall__Outputs {
    return new StartNewCycleCall__Outputs(this);
  }
}

export class StartNewCycleCall__Inputs {
  _call: StartNewCycleCall;

  constructor(call: StartNewCycleCall) {
    this._call = call;
  }

  get circle(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class StartNewCycleCall__Outputs {
  _call: StartNewCycleCall;

  constructor(call: StartNewCycleCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get circleID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get requestIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get circleID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
