// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DepositMadeEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DepositMadeEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DepositMadeEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DepositMadeEntity", id.toString(), this);
  }

  static load(id: string): DepositMadeEntity | null {
    return store.get("DepositMadeEntity", id) as DepositMadeEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    return value.toBytes();
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get circle(): Bytes {
    let value = this.get("circle");
    return value.toBytes();
  }

  set circle(value: Bytes) {
    this.set("circle", Value.fromBytes(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    return value.toBigInt();
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class LoanRequestMadeEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LoanRequestMadeEntity entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LoanRequestMadeEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LoanRequestMadeEntity", id.toString(), this);
  }

  static load(id: string): LoanRequestMadeEntity | null {
    return store.get(
      "LoanRequestMadeEntity",
      id
    ) as LoanRequestMadeEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requestor(): Bytes {
    let value = this.get("requestor");
    return value.toBytes();
  }

  set requestor(value: Bytes) {
    this.set("requestor", Value.fromBytes(value));
  }

  get circle(): Bytes {
    let value = this.get("circle");
    return value.toBytes();
  }

  set circle(value: Bytes) {
    this.set("circle", Value.fromBytes(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    return value.toBigInt();
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get granted(): boolean {
    let value = this.get("granted");
    return value.toBoolean();
  }

  set granted(value: boolean) {
    this.set("granted", Value.fromBoolean(value));
  }
}

export class CircleCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CircleCreatedEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CircleCreatedEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CircleCreatedEntity", id.toString(), this);
  }

  static load(id: string): CircleCreatedEntity | null {
    return store.get("CircleCreatedEntity", id) as CircleCreatedEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get circle(): Bytes {
    let value = this.get("circle");
    return value.toBytes();
  }

  set circle(value: Bytes) {
    this.set("circle", Value.fromBytes(value));
  }

  get timeStamp(): BigInt {
    let value = this.get("timeStamp");
    return value.toBigInt();
  }

  set timeStamp(value: BigInt) {
    this.set("timeStamp", Value.fromBigInt(value));
  }
}
